fun montarTime(nickname: String) {
    //üìå Essa fun√ß√£o √© chamada para cada jogador montar o time de 3 Pok√©mons a partir de
    //uma lista chamada pokedex.

    println("\n$nickname, monte seu time escolhendo 3 Pok√©mon pelo n√∫mero:")
    exibirPokedex()
    //‚úÖ Mostra uma mensagem chamando o jogador e em seguida exibe a Pok√©dex para ele ver os Pok√©mons dispon√≠veis.
    //‚úÖ A fun√ß√£o exibirPokedex() deve imprimir os Pok√©mons com n√∫mero/√≠ndice ‚Äî √© essencial que isso esteja correto.

    val escolhidos = mutableSetOf<Int>()
    //‚úÖ Cria um conjunto (set) para guardar os √≠ndices j√° escolhidos.
    //‚úÖ mutableSetOf garante que n√£o haja repeti√ß√£o de escolha.

    while (escolhidos.size < 3) {
        print("Escolha o Pok√©mon ${escolhidos.size + 1} (1 a ${pokedex.size}): ")
        val escolha = readln().toIntOrNull()
        //O loop continua at√© o jogador escolher 3 Pok√©mons.
        //A entrada do usu√°rio √© convertida com toIntOrNull(), evitando erro se
        //ele digitar algo que n√£o seja n√∫mero.

        if (escolha == null || escolha !in 1..pokedex.size || escolha in escolhidos) {
            println("‚ùå Escolha inv√°lida ou repetida.")
            //Essa linha faz 3 verifica√ß√µes:
            // --> √â um n√∫mero v√°lido (escolha != null)?
            // --> Est√° dentro do intervalo da Pok√©dex?
            // --> J√° foi escolhido antes?
            //Se qualquer condi√ß√£o falhar, mostra mensagem de erro.

        } else {
            val pokemon = pokedex[escolha - 1]
            adicionarPokemon(nickname, pokemon.nome, pokemon.tipo, pokemon.poder)
            escolhidos.add(escolha)
            //O √≠ndice da Pok√©dex come√ßa em 0, por isso o escolha - 1.
            //O Pok√©mon √© buscado da lista pokedex e enviado para a fun√ß√£o adicionarPokemon,
            //que insere ele no time do jogador no map jogadores.
            //Por fim, adiciona o n√∫mero escolhido no set para evitar repeti√ß√µes.
        }
    }
}
